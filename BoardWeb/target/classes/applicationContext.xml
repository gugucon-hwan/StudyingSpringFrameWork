<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">
	
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	<context:component-scan base-package="com.springbook.biz"></context:component-scan>	
	<!-- DataSource 설정 -->
 	<context:property-placeholder location="classpath:config/database.properties" />
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
			<property name="driverClassName" value="${jdbc.driver}"></property>
			<property name="url" value="${jdbc.url}"/>
			<property name="username" value="${jdbc.username}"></property>
			<property name="password" value="${jdbc.password}"></property>	
	</bean>
	
	<!-- Spring JDBC 설정 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- Transaction 설정 -->
	<bean id="txManager"  
			class="org.springframework.jdbc.datasource.DataSourceTransactionManager" >
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
			<property name="dataSource" ref="dataSource" />
			<property name="configLocation" value="classpath:sql-map-config.xml" />			
	</bean>-->
	
	<!-- Spring과 Mybatis연동 설정 -->
	 <bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
			<property name="configLocation" value="classpath:sql-map-config.xml"></property>
			<property name="dataSource" ref="dataSource"></property>
	</bean>
	 <bean class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSession"></constructor-arg>	
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="txPointcut"  expression="execution(* com.springbook.biz..*(..))"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	</aop:config>
	
	
	 <!-- <aop:config>
		<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="allPointcut"/>
		<aop:pointcut expression="execution(* com.springbook.biz..*Impl.get*(..))" id="getPointcut"/>
		<aop:aspect ref="log">
			<aop:before method="printLog" pointcut-ref="allPointcut"/>
		</aop:aspect>	
	</aop:config>-->
	<!-- <bean id="before" class="com.springbook.biz.common.BeforeAdvice" />
	<bean id="afterThrowing" class="com.springbook.biz.common.AfterThrowingAdvice"></bean>
	<bean id="after" class="com.springbook.biz.common.AfterAdvice" />
	<bean id="around" class="com.springbook.biz.common.AroundAdvice" />
	<bean id="afterReturning" class="com.springbook.biz.common.AfterReturningAdvice"></bean>
	
	<aop:config>
		<aop:pointcut id="allPointcut"  expression="execution(* com.springbook.biz..*Impl.*(..))"/>
				
		<aop:aspect ref="around">
			<aop:around method="aroundLog" pointcut-ref="allPointcut" />
		</aop:aspect>		
	</aop:config>-->
	<!-- <bean id="userService" class="com.springbook.biz.user.impl.UserServiceImpl">
		<property name="userDAO" ref="userDAO" />
	</bean>
	<bean id="userDAO" class="com.springbook.biz.user.impl.UserDAO" />-->
	<!-- <bean id="tv" class="polymorphism.LgTV"></bean>
	<bean id="sony" class="polymorphism.SonySpeaker"></bean>-->
	<!-- bean id="tv" class="polymorphism.SamsungTV" p:speaker-ref="sony" p:price="2700000"  
	init-method="initMethod"  destroy-method="destroyMethod" lazy-init="true" scope="singleton">
	</bean>
	<bean id="sony" class="polymorphism.SonySpeaker"></bean>
	<bean id="apple" class="polymorphism.AppleSpeaker"></bean>-->
	<!-- <bean id="collectionBean"
		class="com.springbook.ioc.injection.CollectionBean">
			<property name="addressList">
					<props>
						<prop key="고길동">서울시 강남구 역삼동</prop>
						<prop key="마이콜">서울시 강서구 화곡동</prop>
					</props>
			</property>	
	</bean>-->	
	
</beans>
